{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Engin's Personal Documents Page \u00b6","title":"Home"},{"location":"#welcome-to-engins-personal-documents-page","text":"","title":"Welcome to Engin's Personal Documents Page"},{"location":"about/","text":"About Page \u00b6","title":"About"},{"location":"about/#about-page","text":"","title":"About Page"},{"location":"mrkdwn/","text":"T\u00fcm burada yazanlar ve daha fazlas\u0131 bu d\u00f6k\u00fcmanda kullan\u0131lan material theme sayfas\u0131nda bulunabilir. Check out their page. Note This is note. note with headline This is note with headline. All of them can be with headline Collapsible Note This is collapsible note. All of them can be collapsible. Info This is info. Tip This is tip. Check This is check. Warning This is warning. Danger This is danger. There is also abstract, summary, tldr, todo, hint, important, success, done, question, help, faq, caution, attention, failure, fail, missing, error, bug, example, quote, cite Go Code Block with Line Number Code blo\u011funda herhangi iki sat\u0131r\u0131 highlight etmek istersek hl_lines=\"2 3\" (sadece 2 ce 3. sat\u0131rlar) ya da hl_lines=\"2-5\" (2,3,4,5. sat\u0131rlar) go_code_block.go 1 2 3 4 5 6 7 8 9 import \"fmt\" func main () { speed := 100 current_time := 2.5 //Correct way speed = int ( float64 ( speed ) * current_time ) fmt . Println ( speed ) } Python Code Block with Line Number python_code_block.py 1 from requests import HTTPBasicAuth Yaml theme : features : - content.code.annotate # (1) Highlighting inline code blocks The range () main () function is used to generate a sequence of numbers. Grouping code blocks C C++ #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Grouping other content Unordered list Ordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Normal Console Output $ pip3 install mkdocs \u015eekilli Console Output with Termy $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. Tables Method Description GET Fetch resource PUT Update resource DELETE Delete resource","title":"Markdown Tips"},{"location":"GoTraining/basics/","text":"Variables \u00b6 De\u011fi\u015fkenler go dilinde var <var_name> <var_type> \u015feklinde tan\u0131mlan\u0131rlar. De\u011fi\u015fken isimler underscore ya da harf ile ba\u015flamal\u0131d\u0131r. De\u011fi\u015fken ismi b\u00fcy\u00fck harf ile ba\u015flarsa o isim program i\u00e7erisinde export ediliyor ve program i\u00e7erisinde kullan\u0131labilir hale geliyor. O y\u00fczden k\u00fc\u00e7\u00fck harf ya da alt \u00e7izgi ile ba\u015flamal\u0131. De\u011fi\u015fken say\u0131 ile ba\u015flayamaz ve \u00fcnlem i\u015fareti i\u00e7eremez. \u00c7\u00fcnk\u00fc \u00fcnlem i\u015fareti go dilinde \u00f6zel bir anlama sahiptir. 1 2 3 4 5 6 import \"fmt\" func main () { var speed int fmt . Println ( speed ) } Blank Identifier and Short Declaration \u00b6 De\u011fi\u015fken tipi tan\u0131mlarken iki de\u011fi\u015fkene ayn\u0131 anda type verebiliriz. var1, var2 string \u015feklinde tan\u0131mlad\u0131\u011f\u0131m\u0131zda hem var1 hem de var2 de\u011fi\u015fkeni string tipinde olu\u015fturuluyor. func Split(path string) (dir, file string) bu tan\u0131mlamada Split fonksiyonu girdi olarak string tipinde path de\u011fi\u015fkeni al\u0131rken \u00e7\u0131kt\u0131 olarak da dir ve file isimli iki adet string tipinde de\u011fi\u015fken d\u00f6n\u00fcyor. Spllit fonksiyonu path paketinin bir fonksiyonu ve girilen path de\u011fi\u015fkenini split ederek file ismi ve directory de\u011ferini(iki adet de\u011fi\u015fken) d\u00f6n\u00fcyor. var dir, file string kodu ile de\u011fi\u015fkenleri tan\u0131mlay\u0131p; dir, file = path.Split(\"css/main.css\") \u015feklinde fonksiyonu \u00e7a\u011f\u0131r\u0131p d\u00f6nen de\u011ferleri de\u011fi\u015fkenlere assign edebiliriz. E\u011fer d\u00f6nen de\u011fi\u015fkenlerde birini istemiyorsak, \u00f6rne\u011fin sadece file de\u011f\u015fikenini almak istiyorsak, var file string ve _, file = path.Split(\"css/main.css\") \u015feklinde yazmam\u0131z yeterli. Burada dir de\u011fi\u015fkeni yerine kullan\u0131lan alt \u00e7izgi blank identifier olarak tan\u0131mlan\u0131yor. Kullanmak istenilmeyen de\u011fi\u015fkenler yerine bu kullan\u0131l\u0131r. Kod daha da k\u0131salt\u0131larak short declaration statement olarak tan\u0131mlanabilir. Bu durumda file de\u011fi\u015fkeninin tipini de tan\u0131mlamaya gerek kalm\u0131yor. Fonksiyondan d\u00f6nen de\u011ferin tipi ne ise o tipte oluyor. Bunu yapmak i\u00e7in de : noktalama i\u015fareti kullan\u0131l\u0131yor. _, file := path.Split(\"css/main.css\") tek sat\u0131rl\u0131k kodu ile hem d\u00f6nen de\u011fi\u015fken tipinde hem de de\u011ferinde bir de\u011fi\u015fken elde etmi\u015f oluyoruz. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import ( \"fmt\" \"path\" ) func main () { var dir , file string dir , file = path . Split ( \"css/main/main.css\" ) fmt . Println ( \"dir: \" , dir ) fmt . Println ( \"file: \" , file ) _ , file = path . Split ( \"js/main/main.js\" ) //dir de\u011fi\u015fkenini istemiyorsak '_' ile blank identifier yapabiliriz. fmt . Println ( \"file: \" , file ) //_, file := path.Split(\"img/icons/icon.png\") --> Bu k\u0131s\u0131mda en \u00fcstteki de\u011fi\u015fken tipleri tan\u0131mlamak istemedi\u011fimizde short declaration statement kullan\u0131m\u0131. //fmt.Println(\"file: \", file) En \u00fcstteki de\u011fi\u015fken tipi tan\u0131mlamas\u0131n\u0131 silersek file de\u011fi\u015fkeni d\u00f6nen de\u011fi\u015fkenin tipini alacakt\u0131r. } Use Declarations If \u00b6 E\u011fer de\u011fi\u015fkenin ilk de\u011feri bilinmiyorsa; score := 0 yerine var score int kullan\u0131m\u0131 tavsiye ediliyor. Zaten program kendi bir ilk de\u011fer int de\u011fi\u015fkenine at\u0131yor. Package scoped de\u011fi\u015fken tan\u0131mland\u0131\u011f\u0131nda; herhangi bir fonksiyon i\u00e7inde de\u011filse paket seviyesinde bir de\u011fi\u015fken ise zaten shot declarationa izin verilmiyor. De\u011fi\u015fkenleri daha okunur olmas\u0131 i\u00e7in gruplamak gerekti\u011finde; 1 2 3 4 5 6 7 8 var ( //related video string //closely related duration int current int ) Use Short Declaration If \u00b6 E\u011fer de\u011fi\u015fkenin ilk de\u011feri biliniyorsa; var width, height = 100, 50 yerine width, height := 100, 50 kullan\u0131l\u0131r. Kodun k\u0131sa ve \u00f6z olmas\u0131 a\u00e7\u0131s\u0131ndan da kullan\u0131\u015fl\u0131d\u0131r. Tan\u0131mlanan bir de\u011fi\u015fkenin de\u011feri de\u011fi\u015ftirilip onunla beraber yeni bir de\u011fi\u015fken tan\u0131mlanacaksa; width = 50 ve color := \"red\" yerine width, color := 50, \"red\" kullan\u0131m\u0131 tercih edilmelidir. Buna redeclaration denir. \u00d6rne\u011fin if statement i\u00e7erisinde short declaration kullan\u0131larak sadece o statement a ait bir de\u011fi\u015fken olu\u015fturulabilir. Type Conversion \u00b6 Typelar aras\u0131 d\u00f6n\u00fc\u015f\u00fcm yapmam\u0131z\u0131 sa\u011flar. Bunun i\u00e7in type(value) format\u0131 kullan\u0131l\u0131r. Dikkatli olunmas\u0131 gerekiyor \u00e7\u00fcnk\u00fc tipler de\u011fi\u015firken de\u011fi\u015fkenlerin de\u011ferleri de\u011fi\u015febilir. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import \"fmt\" func main () { speed := 100 current_time := 2.5 //Bu durumda current time de\u011fi\u015fkeni float64 tipinde oldu\u011fu i\u00e7in int tipine //d\u00f6n\u00fc\u015ft\u00fcr\u00fcl\u00fcrse de\u011fer de\u011fi\u015ferek 2 de\u011ferini al\u0131yor ama olmas\u0131 gereken de\u011fer 2.5 speed = speed * int ( current_time ) fmt . Println ( speed ) //Alttaki sat\u0131r da hata verecek \u00e7\u00fcnk\u00fc iki float64 tipindeki de\u011fi\u015fkenin \u00e7arp\u0131m\u0131 yine float64 //Ama bu de\u011feri speed de\u011ferine atad\u0131\u011f\u0131m\u0131z i\u00e7in ve speed de\u011fi\u015fkeni de int oldu\u011fu i\u00e7in hata verir //speed = float64(speed) * current_time //Correct way speed = int ( float64 ( speed ) * current_time ) fmt . Println ( speed ) } Raw Stirng Literals \u00b6 String literals \"\" i\u00e7erisinde tan\u0131mlan\u0131rken raw string literals markdowndaki gibi back tek t\u0131rnak kullan\u0131larak tan\u0131mlan\u0131r. String literals birden fazla sat\u0131r string i\u00e7eremez ve bunda tab ve enter gibi karakterleri \\t\\n gibi escape karakterleri kullanarak yap\u0131labilir. Ancal raw string literals birden fazla sat\u0131r i\u00e7erebilir. Bununla beraber de escape karakterleri yazmam\u0131za gerek kalmaz. \u00d6rne\u011fin html kodunu string de\u011fi\u015fkenine atarken kullan\u0131\u015fl\u0131. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import \"fmt\" func main () { var s string s = \"How are you?\" s = `How are you?` fmt . Println ( s ) //String Literal - I need to type escape character. Go interpret this strings s = \"<html>\\n\\t<body>\\\"How are you?</body></html>\" fmt . Println ( s ) //Raw String Literals - I dont need to type escape charcter. It is whatever it is. s = ` <html> <body>\"How are you?\"</body> </html> ` fmt . Println ( s ) fmt . Println ( \"c:\\\\my\\\\dir\\\\file\" ) // windows file. Double back slash because slash is a escape sequence fmt . Println ( `c:\\my\\dir\\file` ) //Raw String Literals } The output of the above code: How are you? <html> <body>\"How are you?</body></html> <html> <body>\"How are you?\"</body> </html> c:\\my\\dir\\file c:\\my\\dir\\file String Lengths \u00b6 len() fonksiyonu string de\u011fi\u015fkenlerinin karakter say\u0131lar\u0131n\u0131 de\u011fil byte say\u0131lar\u0131n\u0131 d\u00f6ner. \u0130ngilizce olmayan karakterler 4 byte a kadar alana sahip olabilirler. \u00d6rne\u011fin \u0130 karakteri 2 byte oldu\u011fu i\u00e7in \"Eng\u0130n\" stringinin len fonksiyonu sonucu 5 karakter olmas\u0131na ra\u011fmen 6 olarak d\u00f6necektir. 1 2 3 lastName := \"Eken\" firstName := \"Eng\u0130n\" fmt . Println ( len ( lastName ), len ( firstName )) Bunun \u00fcstesinden gelmek i\u00e7in unicode/utf8 paketini import etmemiz gerekiyor. \u0130mport ettinten sonra a\u015fa\u011f\u0131daki kod blo\u011fu \u015feklinde kullanarak ingilizce ya da \u0130ngilizce olmayan herhangi bir karakteri i\u00e7eren stringlerin as\u0131l karakter say\u0131s\u0131n\u0131 bulabiliriz. 1 2 3 4 5 import ( \"fmt\" ; \"unicode/utf8\" ) func main (){ name := \"Eng\u0130n\" fmt . Println ( utf8 . RuneCountInString ( name )) } Yukar\u0131daki kod par\u00e7ac\u0131\u011f\u0131n\u0131n ekran \u00e7\u0131kt\u0131s\u0131 4 6 olarak d\u00f6necektir. IOTA \u00b6 Const de\u011fi\u015fkenlerin de\u011ferlerini integer olarak 1 artt\u0131rarak de\u011fer verdirmeye yar\u0131yor. \u00d6rne\u011fin g\u00fcnlerin 0 dan ba\u015flayarak 7 ye kadar de\u011fer almas\u0131n\u0131 istiyorsak a\u015fa\u011f\u0131daki gibi kodu yazmam\u0131z gerekiyor: 1 2 3 4 5 6 7 8 9 10 11 const ( monday iota //0 de\u011ferini al\u0131yor tuesday //iota 0dan ba\u015flad\u0131\u011f\u0131 i\u00e7in bir artt\u0131r\u0131l\u0131p 1 de\u011ferini al\u0131yor. A\u015fa\u011f\u0131 do\u011fru 1 artt\u0131r\u0131larak devam ediyor. wednesday thursday friday saturday sunday ) fmt . Println ( monday , tuesday , wednesday , thursday , friday , saturday , sunday ) Println vs Printf \u00b6","title":"Basics"},{"location":"GoTraining/basics/#variables","text":"De\u011fi\u015fkenler go dilinde var <var_name> <var_type> \u015feklinde tan\u0131mlan\u0131rlar. De\u011fi\u015fken isimler underscore ya da harf ile ba\u015flamal\u0131d\u0131r. De\u011fi\u015fken ismi b\u00fcy\u00fck harf ile ba\u015flarsa o isim program i\u00e7erisinde export ediliyor ve program i\u00e7erisinde kullan\u0131labilir hale geliyor. O y\u00fczden k\u00fc\u00e7\u00fck harf ya da alt \u00e7izgi ile ba\u015flamal\u0131. De\u011fi\u015fken say\u0131 ile ba\u015flayamaz ve \u00fcnlem i\u015fareti i\u00e7eremez. \u00c7\u00fcnk\u00fc \u00fcnlem i\u015fareti go dilinde \u00f6zel bir anlama sahiptir. 1 2 3 4 5 6 import \"fmt\" func main () { var speed int fmt . Println ( speed ) }","title":"Variables"},{"location":"GoTraining/basics/#blank-identifier-and-short-declaration","text":"De\u011fi\u015fken tipi tan\u0131mlarken iki de\u011fi\u015fkene ayn\u0131 anda type verebiliriz. var1, var2 string \u015feklinde tan\u0131mlad\u0131\u011f\u0131m\u0131zda hem var1 hem de var2 de\u011fi\u015fkeni string tipinde olu\u015fturuluyor. func Split(path string) (dir, file string) bu tan\u0131mlamada Split fonksiyonu girdi olarak string tipinde path de\u011fi\u015fkeni al\u0131rken \u00e7\u0131kt\u0131 olarak da dir ve file isimli iki adet string tipinde de\u011fi\u015fken d\u00f6n\u00fcyor. Spllit fonksiyonu path paketinin bir fonksiyonu ve girilen path de\u011fi\u015fkenini split ederek file ismi ve directory de\u011ferini(iki adet de\u011fi\u015fken) d\u00f6n\u00fcyor. var dir, file string kodu ile de\u011fi\u015fkenleri tan\u0131mlay\u0131p; dir, file = path.Split(\"css/main.css\") \u015feklinde fonksiyonu \u00e7a\u011f\u0131r\u0131p d\u00f6nen de\u011ferleri de\u011fi\u015fkenlere assign edebiliriz. E\u011fer d\u00f6nen de\u011fi\u015fkenlerde birini istemiyorsak, \u00f6rne\u011fin sadece file de\u011f\u015fikenini almak istiyorsak, var file string ve _, file = path.Split(\"css/main.css\") \u015feklinde yazmam\u0131z yeterli. Burada dir de\u011fi\u015fkeni yerine kullan\u0131lan alt \u00e7izgi blank identifier olarak tan\u0131mlan\u0131yor. Kullanmak istenilmeyen de\u011fi\u015fkenler yerine bu kullan\u0131l\u0131r. Kod daha da k\u0131salt\u0131larak short declaration statement olarak tan\u0131mlanabilir. Bu durumda file de\u011fi\u015fkeninin tipini de tan\u0131mlamaya gerek kalm\u0131yor. Fonksiyondan d\u00f6nen de\u011ferin tipi ne ise o tipte oluyor. Bunu yapmak i\u00e7in de : noktalama i\u015fareti kullan\u0131l\u0131yor. _, file := path.Split(\"css/main.css\") tek sat\u0131rl\u0131k kodu ile hem d\u00f6nen de\u011fi\u015fken tipinde hem de de\u011ferinde bir de\u011fi\u015fken elde etmi\u015f oluyoruz. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import ( \"fmt\" \"path\" ) func main () { var dir , file string dir , file = path . Split ( \"css/main/main.css\" ) fmt . Println ( \"dir: \" , dir ) fmt . Println ( \"file: \" , file ) _ , file = path . Split ( \"js/main/main.js\" ) //dir de\u011fi\u015fkenini istemiyorsak '_' ile blank identifier yapabiliriz. fmt . Println ( \"file: \" , file ) //_, file := path.Split(\"img/icons/icon.png\") --> Bu k\u0131s\u0131mda en \u00fcstteki de\u011fi\u015fken tipleri tan\u0131mlamak istemedi\u011fimizde short declaration statement kullan\u0131m\u0131. //fmt.Println(\"file: \", file) En \u00fcstteki de\u011fi\u015fken tipi tan\u0131mlamas\u0131n\u0131 silersek file de\u011fi\u015fkeni d\u00f6nen de\u011fi\u015fkenin tipini alacakt\u0131r. }","title":"Blank Identifier and Short Declaration"},{"location":"GoTraining/basics/#use-declarations-if","text":"E\u011fer de\u011fi\u015fkenin ilk de\u011feri bilinmiyorsa; score := 0 yerine var score int kullan\u0131m\u0131 tavsiye ediliyor. Zaten program kendi bir ilk de\u011fer int de\u011fi\u015fkenine at\u0131yor. Package scoped de\u011fi\u015fken tan\u0131mland\u0131\u011f\u0131nda; herhangi bir fonksiyon i\u00e7inde de\u011filse paket seviyesinde bir de\u011fi\u015fken ise zaten shot declarationa izin verilmiyor. De\u011fi\u015fkenleri daha okunur olmas\u0131 i\u00e7in gruplamak gerekti\u011finde; 1 2 3 4 5 6 7 8 var ( //related video string //closely related duration int current int )","title":"Use Declarations If"},{"location":"GoTraining/basics/#use-short-declaration-if","text":"E\u011fer de\u011fi\u015fkenin ilk de\u011feri biliniyorsa; var width, height = 100, 50 yerine width, height := 100, 50 kullan\u0131l\u0131r. Kodun k\u0131sa ve \u00f6z olmas\u0131 a\u00e7\u0131s\u0131ndan da kullan\u0131\u015fl\u0131d\u0131r. Tan\u0131mlanan bir de\u011fi\u015fkenin de\u011feri de\u011fi\u015ftirilip onunla beraber yeni bir de\u011fi\u015fken tan\u0131mlanacaksa; width = 50 ve color := \"red\" yerine width, color := 50, \"red\" kullan\u0131m\u0131 tercih edilmelidir. Buna redeclaration denir. \u00d6rne\u011fin if statement i\u00e7erisinde short declaration kullan\u0131larak sadece o statement a ait bir de\u011fi\u015fken olu\u015fturulabilir.","title":"Use Short Declaration If"},{"location":"GoTraining/basics/#type-conversion","text":"Typelar aras\u0131 d\u00f6n\u00fc\u015f\u00fcm yapmam\u0131z\u0131 sa\u011flar. Bunun i\u00e7in type(value) format\u0131 kullan\u0131l\u0131r. Dikkatli olunmas\u0131 gerekiyor \u00e7\u00fcnk\u00fc tipler de\u011fi\u015firken de\u011fi\u015fkenlerin de\u011ferleri de\u011fi\u015febilir. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import \"fmt\" func main () { speed := 100 current_time := 2.5 //Bu durumda current time de\u011fi\u015fkeni float64 tipinde oldu\u011fu i\u00e7in int tipine //d\u00f6n\u00fc\u015ft\u00fcr\u00fcl\u00fcrse de\u011fer de\u011fi\u015ferek 2 de\u011ferini al\u0131yor ama olmas\u0131 gereken de\u011fer 2.5 speed = speed * int ( current_time ) fmt . Println ( speed ) //Alttaki sat\u0131r da hata verecek \u00e7\u00fcnk\u00fc iki float64 tipindeki de\u011fi\u015fkenin \u00e7arp\u0131m\u0131 yine float64 //Ama bu de\u011feri speed de\u011ferine atad\u0131\u011f\u0131m\u0131z i\u00e7in ve speed de\u011fi\u015fkeni de int oldu\u011fu i\u00e7in hata verir //speed = float64(speed) * current_time //Correct way speed = int ( float64 ( speed ) * current_time ) fmt . Println ( speed ) }","title":"Type Conversion"},{"location":"GoTraining/basics/#raw-stirng-literals","text":"String literals \"\" i\u00e7erisinde tan\u0131mlan\u0131rken raw string literals markdowndaki gibi back tek t\u0131rnak kullan\u0131larak tan\u0131mlan\u0131r. String literals birden fazla sat\u0131r string i\u00e7eremez ve bunda tab ve enter gibi karakterleri \\t\\n gibi escape karakterleri kullanarak yap\u0131labilir. Ancal raw string literals birden fazla sat\u0131r i\u00e7erebilir. Bununla beraber de escape karakterleri yazmam\u0131za gerek kalmaz. \u00d6rne\u011fin html kodunu string de\u011fi\u015fkenine atarken kullan\u0131\u015fl\u0131. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import \"fmt\" func main () { var s string s = \"How are you?\" s = `How are you?` fmt . Println ( s ) //String Literal - I need to type escape character. Go interpret this strings s = \"<html>\\n\\t<body>\\\"How are you?</body></html>\" fmt . Println ( s ) //Raw String Literals - I dont need to type escape charcter. It is whatever it is. s = ` <html> <body>\"How are you?\"</body> </html> ` fmt . Println ( s ) fmt . Println ( \"c:\\\\my\\\\dir\\\\file\" ) // windows file. Double back slash because slash is a escape sequence fmt . Println ( `c:\\my\\dir\\file` ) //Raw String Literals } The output of the above code: How are you? <html> <body>\"How are you?</body></html> <html> <body>\"How are you?\"</body> </html> c:\\my\\dir\\file c:\\my\\dir\\file","title":"Raw Stirng Literals"},{"location":"GoTraining/basics/#string-lengths","text":"len() fonksiyonu string de\u011fi\u015fkenlerinin karakter say\u0131lar\u0131n\u0131 de\u011fil byte say\u0131lar\u0131n\u0131 d\u00f6ner. \u0130ngilizce olmayan karakterler 4 byte a kadar alana sahip olabilirler. \u00d6rne\u011fin \u0130 karakteri 2 byte oldu\u011fu i\u00e7in \"Eng\u0130n\" stringinin len fonksiyonu sonucu 5 karakter olmas\u0131na ra\u011fmen 6 olarak d\u00f6necektir. 1 2 3 lastName := \"Eken\" firstName := \"Eng\u0130n\" fmt . Println ( len ( lastName ), len ( firstName )) Bunun \u00fcstesinden gelmek i\u00e7in unicode/utf8 paketini import etmemiz gerekiyor. \u0130mport ettinten sonra a\u015fa\u011f\u0131daki kod blo\u011fu \u015feklinde kullanarak ingilizce ya da \u0130ngilizce olmayan herhangi bir karakteri i\u00e7eren stringlerin as\u0131l karakter say\u0131s\u0131n\u0131 bulabiliriz. 1 2 3 4 5 import ( \"fmt\" ; \"unicode/utf8\" ) func main (){ name := \"Eng\u0130n\" fmt . Println ( utf8 . RuneCountInString ( name )) } Yukar\u0131daki kod par\u00e7ac\u0131\u011f\u0131n\u0131n ekran \u00e7\u0131kt\u0131s\u0131 4 6 olarak d\u00f6necektir.","title":"String Lengths"},{"location":"GoTraining/basics/#iota","text":"Const de\u011fi\u015fkenlerin de\u011ferlerini integer olarak 1 artt\u0131rarak de\u011fer verdirmeye yar\u0131yor. \u00d6rne\u011fin g\u00fcnlerin 0 dan ba\u015flayarak 7 ye kadar de\u011fer almas\u0131n\u0131 istiyorsak a\u015fa\u011f\u0131daki gibi kodu yazmam\u0131z gerekiyor: 1 2 3 4 5 6 7 8 9 10 11 const ( monday iota //0 de\u011ferini al\u0131yor tuesday //iota 0dan ba\u015flad\u0131\u011f\u0131 i\u00e7in bir artt\u0131r\u0131l\u0131p 1 de\u011ferini al\u0131yor. A\u015fa\u011f\u0131 do\u011fru 1 artt\u0131r\u0131larak devam ediyor. wednesday thursday friday saturday sunday ) fmt . Println ( monday , tuesday , wednesday , thursday , friday , saturday , sunday )","title":"IOTA"},{"location":"GoTraining/basics/#println-vs-printf","text":"","title":"Println vs Printf"},{"location":"HowTo/automate-vpn/","text":"Automating Global Protect Vpn Connection \u00b6 \u0130lk ihtiyac\u0131m\u0131z olan \u015fey python ve pip paketleri. Bunlar\u0131n mac \u00fczerinde y\u00fckl\u00fc ve kurulu olmas\u0131 gerekiyor. MAC default olarak python3 y\u00fckl\u00fc geliyor. Sadece y\u00fckleyece\u011fimiz paket i\u00e7in pip paket manager gerekiyor. Bunun i\u00e7in de terminalden a\u015fa\u011f\u0131daki komutu \u00e7al\u0131\u015ft\u0131rmak gerekiyor $ python3 -m ensurepip --upgrade Sonras\u0131nda a\u015fa\u011f\u0131daki komut ile Global Protect i\u00e7in yaz\u0131lm\u0131\u015f ve SYMC ve 30 saniyede bir de\u011fi\u015fen kod \u00fcretilmesini sa\u011flayan paketi y\u00fckl\u00fcyoruz. Pip komutu python paketi alt\u0131nda oluyor y\u00fcklemeden sonra. Do\u011frudan home directoryden \u00e7al\u0131\u015ft\u0131rabilmek i\u00e7in pipin bulundu\u011fu dosyanon yolunu path variablelar\u0131m\u0131z aras\u0131na eklemek gerekiyor. $ pip3 install python-vipaccess A\u015fa\u011f\u0131daki komut ile bir SYMC(global protectin telefon uygulamas\u0131 i\u00e7in \u00fcretti\u011fi id \u00e7e\u015fidi) id \u00fcretiliyor(i.e. SYMC65526424) $ vipaccess provision -t SYMC Bu id nin sisteme sizin ad\u0131n\u0131za kay\u0131t ettirilmesi gerekiyor. Sonras\u0131nda bu id kullan\u0131larak 30 saniyede bir de\u011fi\u015fen kod \u00fcretilebiliyor. \u00dcretilen kodu g\u00f6rmek i\u00e7in a\u015fa\u011f\u0131daki komut kullan\u0131l\u0131yor. $ vipaccess show -f /Users/ {{ mac username }} /.vipaccess Sonras\u0131nda kendi domain username ve password kullanarak vpn ba\u011flant\u0131s\u0131 sa\u011flaman\u0131z ve bu \u00fcretilen kodu girip vpn e ba\u011flanman\u0131z gerekiyor. Bunu da openconnect ile komut sat\u0131r\u0131 \u00fczerinden yapabilirsiniz. Global protect i\u00e7in de deste\u011fi var. Y\u00fcklemek i\u00e7in a\u015fa\u011f\u0131daki komut \u00e7al\u0131\u015ft\u0131r\u0131l\u0131yor. $ brew install openconnect Openconnect \u00e7al\u0131\u015ft\u0131rmak i\u00e7in root yetkisinin olmas\u0131 gerekiyor. -u opsiyonu ile infoshop username de\u011feri veriliyor, --protocol=gp opsiyonu ile de global protect kullan\u0131larak ba\u011flan\u0131laca\u011f\u0131 s\u00f6ylenir. Sonras\u0131nda da vpn adresinin girilmesi gerekiyor. A\u015fa\u011f\u0131daki komut \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131\u011f\u0131nda \u00f6nce root \u015fifresi, sonra domain \u015fifreniz, en son olarak da 30 saniyelik kod girilip vpn connection tamamlanm\u0131\u015f oluyor. $ sudo openconnect -u {{ infoshop username }} --protocol = gp sslvpn.hepsiburada.com Mac default sudo password timeout de\u011feri 5 dakika. Bir kez girince sonraki 5 dakika tekrar girmenize gerek yok. Ancak bizim scriptimizin d\u00fczg\u00fcn \u00e7al\u0131\u015fmas\u0131 i\u00e7in bu ad\u0131m\u0131n olmamas\u0131 laz\u0131m. Yoksa s\u00fcrekli sudo password\u00fc sorup sormad\u0131\u011f\u0131n\u0131 kontrol ettirmek gerekiyor. Bunun i\u00e7in de a\u015fa\u011f\u0131daki komut \u00e7al\u0131\u015ft\u0131r\u0131larak sudoers dosyas\u0131 g\u00f6r\u00fcnt\u00fclenir. %admin ile ba\u011flayan sat\u0131r a\u015fa\u011f\u0131daki gibi editlenip kaydedilir. $ sudo visudo % admin ALL = ( ALL ) NOPASSWD: ALL Warning Bu edit admin grubuna sahip kullan\u0131l\u0131c\u0131lar i\u00e7in root password\u00fc sorulmas\u0131n\u0131 engelliyor. Security a\u00e7\u0131s\u0131ndan \u00f6nerilmez. Art\u0131k otomatize etme k\u0131sm\u0131na ge\u00e7ebiliriz. Bunun i\u00e7in a\u015fa\u011f\u0131daki iki sat\u0131r\u0131 bir dosyaya yazmam\u0131z(test.sh) gerekiyor. !/bin/bash (echo \"{{ infoshop password }}\"; vipaccess show -f /Users/{{ mac username }}/.vipaccess) | sudo -S openconnect --protocol=gp -u {{ infoshop username }} sslvpn.hepsiburada.com 2>&1 Olu\u015fturdu\u011funuz script dosyas\u0131n\u0131 executable yapman\u0131z gerekiyor. Bunu da a\u015fa\u011f\u0131daki komut ile yapabilirsiniz. $ chmod +x ./test.sh ( Dosyay\u0131 create etti\u011finiz path girilmeli ) Art\u0131k ./test.sh ile scriptinizi \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131n\u0131zda vpn ba\u011flant\u0131n\u0131z\u0131n yap\u0131ld\u0131\u011f\u0131n\u0131 ve vpn rotalar\u0131n\u0131n g\u00f6nderildi\u011fini g\u00f6receksiniz. --E\u011fer \u015fifrenizi script i\u00e7erisinde echo komtu ile \u00e7a\u011f\u0131rmak istemiyorsan\u0131z macbookda hali haz\u0131rda bulunan keychain i\u00e7erisine \u015fifreyi kaydedip oradan \u00e7a\u011f\u0131rabilirsiniz. Yeni \u015fifre eklemek i\u00e7in a\u015fa\u011f\u0131daki komut \u00e7al\u0131\u015f\u0131t\u0131r\u0131lmal\u0131. $ security add-generic-password -s 'InfoshopPass' -a 'eeken' -w 'password123' Bu komut ile \u015fifrenizi keychaine ekledikten sonra a\u015fa\u011f\u0131daki komutu \u00e7al\u0131\u015ft\u0131rarak girdi\u011finiz \u015fifreyi elde edebilirsiniz. $ security find-generic-password -w -s 'InfoshopPass' -a 'eeken' \u015eifrenizi secure bir yerde saklay\u0131p script i\u00e7erisinde g\u00f6r\u00fcnmeden \u00e7a\u011f\u0131rmak istedi\u011finiz takdirde de scripti a\u015fa\u011f\u0131daki haline getirmeniz gerekmektedir. $ ( security find-generic-password -w -s 'InfoshopPass' -a 'eeken' ; vipaccess show -f /Users/ {{ mac username }} /.vipaccess ) | sudo -S openconnect --protocol = gp -u {{ infoshop username }} sslvpn.hepsiburada.com 2 > & 1","title":"Automating Global Protect VPN Connection"},{"location":"HowTo/automate-vpn/#automating-global-protect-vpn-connection","text":"\u0130lk ihtiyac\u0131m\u0131z olan \u015fey python ve pip paketleri. Bunlar\u0131n mac \u00fczerinde y\u00fckl\u00fc ve kurulu olmas\u0131 gerekiyor. MAC default olarak python3 y\u00fckl\u00fc geliyor. Sadece y\u00fckleyece\u011fimiz paket i\u00e7in pip paket manager gerekiyor. Bunun i\u00e7in de terminalden a\u015fa\u011f\u0131daki komutu \u00e7al\u0131\u015ft\u0131rmak gerekiyor $ python3 -m ensurepip --upgrade Sonras\u0131nda a\u015fa\u011f\u0131daki komut ile Global Protect i\u00e7in yaz\u0131lm\u0131\u015f ve SYMC ve 30 saniyede bir de\u011fi\u015fen kod \u00fcretilmesini sa\u011flayan paketi y\u00fckl\u00fcyoruz. Pip komutu python paketi alt\u0131nda oluyor y\u00fcklemeden sonra. Do\u011frudan home directoryden \u00e7al\u0131\u015ft\u0131rabilmek i\u00e7in pipin bulundu\u011fu dosyanon yolunu path variablelar\u0131m\u0131z aras\u0131na eklemek gerekiyor. $ pip3 install python-vipaccess A\u015fa\u011f\u0131daki komut ile bir SYMC(global protectin telefon uygulamas\u0131 i\u00e7in \u00fcretti\u011fi id \u00e7e\u015fidi) id \u00fcretiliyor(i.e. SYMC65526424) $ vipaccess provision -t SYMC Bu id nin sisteme sizin ad\u0131n\u0131za kay\u0131t ettirilmesi gerekiyor. Sonras\u0131nda bu id kullan\u0131larak 30 saniyede bir de\u011fi\u015fen kod \u00fcretilebiliyor. \u00dcretilen kodu g\u00f6rmek i\u00e7in a\u015fa\u011f\u0131daki komut kullan\u0131l\u0131yor. $ vipaccess show -f /Users/ {{ mac username }} /.vipaccess Sonras\u0131nda kendi domain username ve password kullanarak vpn ba\u011flant\u0131s\u0131 sa\u011flaman\u0131z ve bu \u00fcretilen kodu girip vpn e ba\u011flanman\u0131z gerekiyor. Bunu da openconnect ile komut sat\u0131r\u0131 \u00fczerinden yapabilirsiniz. Global protect i\u00e7in de deste\u011fi var. Y\u00fcklemek i\u00e7in a\u015fa\u011f\u0131daki komut \u00e7al\u0131\u015ft\u0131r\u0131l\u0131yor. $ brew install openconnect Openconnect \u00e7al\u0131\u015ft\u0131rmak i\u00e7in root yetkisinin olmas\u0131 gerekiyor. -u opsiyonu ile infoshop username de\u011feri veriliyor, --protocol=gp opsiyonu ile de global protect kullan\u0131larak ba\u011flan\u0131laca\u011f\u0131 s\u00f6ylenir. Sonras\u0131nda da vpn adresinin girilmesi gerekiyor. A\u015fa\u011f\u0131daki komut \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131\u011f\u0131nda \u00f6nce root \u015fifresi, sonra domain \u015fifreniz, en son olarak da 30 saniyelik kod girilip vpn connection tamamlanm\u0131\u015f oluyor. $ sudo openconnect -u {{ infoshop username }} --protocol = gp sslvpn.hepsiburada.com Mac default sudo password timeout de\u011feri 5 dakika. Bir kez girince sonraki 5 dakika tekrar girmenize gerek yok. Ancak bizim scriptimizin d\u00fczg\u00fcn \u00e7al\u0131\u015fmas\u0131 i\u00e7in bu ad\u0131m\u0131n olmamas\u0131 laz\u0131m. Yoksa s\u00fcrekli sudo password\u00fc sorup sormad\u0131\u011f\u0131n\u0131 kontrol ettirmek gerekiyor. Bunun i\u00e7in de a\u015fa\u011f\u0131daki komut \u00e7al\u0131\u015ft\u0131r\u0131larak sudoers dosyas\u0131 g\u00f6r\u00fcnt\u00fclenir. %admin ile ba\u011flayan sat\u0131r a\u015fa\u011f\u0131daki gibi editlenip kaydedilir. $ sudo visudo % admin ALL = ( ALL ) NOPASSWD: ALL Warning Bu edit admin grubuna sahip kullan\u0131l\u0131c\u0131lar i\u00e7in root password\u00fc sorulmas\u0131n\u0131 engelliyor. Security a\u00e7\u0131s\u0131ndan \u00f6nerilmez. Art\u0131k otomatize etme k\u0131sm\u0131na ge\u00e7ebiliriz. Bunun i\u00e7in a\u015fa\u011f\u0131daki iki sat\u0131r\u0131 bir dosyaya yazmam\u0131z(test.sh) gerekiyor. !/bin/bash (echo \"{{ infoshop password }}\"; vipaccess show -f /Users/{{ mac username }}/.vipaccess) | sudo -S openconnect --protocol=gp -u {{ infoshop username }} sslvpn.hepsiburada.com 2>&1 Olu\u015fturdu\u011funuz script dosyas\u0131n\u0131 executable yapman\u0131z gerekiyor. Bunu da a\u015fa\u011f\u0131daki komut ile yapabilirsiniz. $ chmod +x ./test.sh ( Dosyay\u0131 create etti\u011finiz path girilmeli ) Art\u0131k ./test.sh ile scriptinizi \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131n\u0131zda vpn ba\u011flant\u0131n\u0131z\u0131n yap\u0131ld\u0131\u011f\u0131n\u0131 ve vpn rotalar\u0131n\u0131n g\u00f6nderildi\u011fini g\u00f6receksiniz. --E\u011fer \u015fifrenizi script i\u00e7erisinde echo komtu ile \u00e7a\u011f\u0131rmak istemiyorsan\u0131z macbookda hali haz\u0131rda bulunan keychain i\u00e7erisine \u015fifreyi kaydedip oradan \u00e7a\u011f\u0131rabilirsiniz. Yeni \u015fifre eklemek i\u00e7in a\u015fa\u011f\u0131daki komut \u00e7al\u0131\u015f\u0131t\u0131r\u0131lmal\u0131. $ security add-generic-password -s 'InfoshopPass' -a 'eeken' -w 'password123' Bu komut ile \u015fifrenizi keychaine ekledikten sonra a\u015fa\u011f\u0131daki komutu \u00e7al\u0131\u015ft\u0131rarak girdi\u011finiz \u015fifreyi elde edebilirsiniz. $ security find-generic-password -w -s 'InfoshopPass' -a 'eeken' \u015eifrenizi secure bir yerde saklay\u0131p script i\u00e7erisinde g\u00f6r\u00fcnmeden \u00e7a\u011f\u0131rmak istedi\u011finiz takdirde de scripti a\u015fa\u011f\u0131daki haline getirmeniz gerekmektedir. $ ( security find-generic-password -w -s 'InfoshopPass' -a 'eeken' ; vipaccess show -f /Users/ {{ mac username }} /.vipaccess ) | sudo -S openconnect --protocol = gp -u {{ infoshop username }} sslvpn.hepsiburada.com 2 > & 1","title":"Automating Global Protect Vpn Connection"},{"location":"HowTo/create-update-comment-jira/","text":"Creating Ticket \u00b6 \u00d6ncelikle kullan\u0131lan jira APIsi kullan\u0131larak ticket\u0131n create edilmesi gerekiyor. Bunun i\u00e7in de requests ve json k\u00fct\u00fcphanelerinin import edilmesi gerekiyor. Sonras\u0131nda create edilecek ticket\u0131n gerekli alanlar\u0131n\u0131n editlenmesini sa\u011flayan bir data gerekiyor. Bu datada issuetype , project ve summary/description/assignee gibi de\u011fi\u015fkenlerin de yer almas\u0131 gerekiyor. Note issuetype ve project alanlar\u0131n\u0131n var olan ticketlar \u00fczerinden GET request ile \u00f6ncelikle bulunmas\u0131 gerekmektedir. Authentication i\u00e7in jira Basic Authentication destekliyor. Bunun i\u00e7in kullan\u0131c\u0131 ad\u0131 ve \u015fifrenin base64 format\u0131nda encode edilmesi gerekiyor. Bu encode i\u015fleminin \u00e7\u0131kt\u0131s\u0131 authentication header olarak kullan\u0131labilir. Encoding username and password 1 2 3 4 5 6 import requests , json , base64 message = \"username:password\" message_bytes = message . encode ( 'ascii' ) base64_bytes = base64 . b64encode ( message_bytes ) base64_message = base64_bytes . decode ( 'ascii' ) print ( base64_message ) #\u00c7\u0131kt\u0131s\u0131 authentication header i\u00e7in kullan\u0131lacak Sonras\u0131nda APIye POST i\u015flemi ile ticket create edilebilir. A\u015fa\u011f\u0131daki kod assigneesi \"eeken\" olan ve verilen summary ve description alanlar\u0131na sahip bir ticket create etmektedir. Creating jira ticket 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 import requests import json from requests.auth import HTTPBasicAuth # Api link for jira url = 'https://jira.hepsiburada.com:8443/rest/api/2/issue/' # request headers included with authorization. Basic means this is basic authentication and meaningless stuff is base64 encrypted result for \"username:pass\" request_headers = { \"Authorization\" : \"Basic ZWVrZW46RW5nKkVrbjU=\" , \"Content-Type\" : \"application/json\" , \"Accept\" : \"application/json\" , } # You can send data with post or put requests. Created a payload which is included with necessary info to create ticket and make it str with json.dumps payload = json . dumps ( { \"fields\" : { \"issuetype\" : { \"id\" : \"3\" }, \"project\" : { \"id\" : \"10032\" }, \"summary\" : \"Test Ortam\u0131 Yeni Salon Altyap\u0131 Haz\u0131rl\u0131\u011f\u0131\" , \"description\" : \"Test ortam\u0131 ta\u015f\u0131nmas\u0131 i\u00e7in Salon 2 ye sunucular\u0131n kablo altyap\u0131s\u0131n\u0131n haz\u0131rlanmas\u0131.\" , \"assignee\" : { \"name\" : \"eeken\" , } } } ) # This is the code snippet making things done. Sending post request to the 'url' with 'request_headers' to post 'payload' response = requests . request ( \"POST\" , url , data = payload , headers = request_headers , ) # This line is printing the answer to your request with readable format. print ( json . dumps ( json . loads ( response . text ), sort_keys = True , indent = 4 , separators = ( \",\" , \": \" ))) Updating and Adding Comment \u00b6 Ticketa comment eklenebilmesi i\u00e7in \u00f6nce yukar\u0131daki kod ile create edilen ticket\u0131n key de\u011ferinin al\u0131nmas\u0131 gerekiyor. Bu de\u011fer ile ticket \u00fczerinde i\u015flem yap\u0131lacak. Yine bir post i\u015flemi ve eklenecek commenti data olarak request i\u00e7erisinde g\u00f6ndererek bu i\u015flem ger\u00e7ekle\u015ftirilebilir. Adding comment 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # If you want to edit the created ticket above, you need to provide the 'key' or 'id' value for that ticket. Key value is much more understandable like SYS-17895. # Above ticket create request answer the request with key value for that ticket. So, you can get the value and assign to a variable with below codeline. key = json . loads ( response . text )[ 'key' ] # You need to add key value and \"/comment\" to your URL to add comment. url_comment = url + str ( key ) + \"/comment\" # Use the body value for the comment that you want to add payload = json . dumps ( { \"body\" : \"Altyap\u0131 haz\u0131rlanm\u0131\u015f, sunucular ta\u015f\u0131nabilir hale gelmi\u015ftir.\" , } ) # Send POST request to edit the ticket with the above comment. response = requests . request ( \"POST\" , url_comment , data = payload , headers = request_headers , ) print ( json . dumps ( json . loads ( response . text ), sort_keys = True , indent = 4 , separators = ( \",\" , \": \" ))) Comment ekledikten sonra art\u0131k ticket\u0131n statusu de de\u011fi\u015ftirilebilir. Bu i\u015flem i\u00e7in API urline /transition eklenmelidir. Yine bir post i\u015flemi oldu\u011fu i\u00e7in de post data i\u00e7erisinde transition id belirtilmelidir. Bu id ler yine kurulan jiradan jiraya de\u011fi\u015fmektedir. Yine get API calllar\u0131 ile bunlar var olan ticketlar i\u00e7in belirlenebilir. Bizim ortam\u0131m\u0131z i\u00e7in In Progress 61, Resolved 31, Closed is 41 idsine sahiptir. Updating Ticket 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 # You can change the ticket status with adding key + /transition to you URL url_status = url + str ( key ) + \"/transitions\" # For the transition to take place, you need to provide at least \"update\" or \"fields\" value. # id value is 61 for the status 'In Progress', 31 for the status 'Resolved' and 41 for the status 'Closed' for our workplace. These values will be different for different workplaces. payload = json . dumps ( { \"update\" : {}, \"transition\" : { \"id\" : \"\" } } ) # This loop is for changing case status to In Progress --> Resolved --> Closed respectively. for i in range ( 3 ): payload = json . loads ( payload ) if i == 0 : payload [ 'transition' ][ 'id' ] = \"61\" print ( payload [ 'transition' ][ 'id' ]) elif i == 1 : payload [ 'transition' ][ 'id' ] = \"31\" print ( payload [ 'transition' ][ 'id' ]) elif i == 2 : payload [ 'transition' ][ 'id' ] = \"41\" print ( payload [ 'transition' ][ 'id' ]) payload = json . dumps ( payload ) response = requests . request ( \"POST\" , url_status , data = payload , headers = request_headers , ) print ( response ) Note Ticketa epic link vermek i\u00e7in data g\u00f6ndermemiz gereken alan \"customfield_10961\". Bu de\u011fer \"fields\" alan\u0131 alt\u0131nda yer al\u0131yor. E\u011fer epic link olarak \"Network Configuration\" vermek istiyorsak yukar\u0131daki field\u0131 \"customfield_10961\": \"SYS-17387\", \u015feklinde config etmemiz laz\u0131m.","title":"Create-Update-Comment Jira Ticet"},{"location":"HowTo/create-update-comment-jira/#creating-ticket","text":"\u00d6ncelikle kullan\u0131lan jira APIsi kullan\u0131larak ticket\u0131n create edilmesi gerekiyor. Bunun i\u00e7in de requests ve json k\u00fct\u00fcphanelerinin import edilmesi gerekiyor. Sonras\u0131nda create edilecek ticket\u0131n gerekli alanlar\u0131n\u0131n editlenmesini sa\u011flayan bir data gerekiyor. Bu datada issuetype , project ve summary/description/assignee gibi de\u011fi\u015fkenlerin de yer almas\u0131 gerekiyor. Note issuetype ve project alanlar\u0131n\u0131n var olan ticketlar \u00fczerinden GET request ile \u00f6ncelikle bulunmas\u0131 gerekmektedir. Authentication i\u00e7in jira Basic Authentication destekliyor. Bunun i\u00e7in kullan\u0131c\u0131 ad\u0131 ve \u015fifrenin base64 format\u0131nda encode edilmesi gerekiyor. Bu encode i\u015fleminin \u00e7\u0131kt\u0131s\u0131 authentication header olarak kullan\u0131labilir. Encoding username and password 1 2 3 4 5 6 import requests , json , base64 message = \"username:password\" message_bytes = message . encode ( 'ascii' ) base64_bytes = base64 . b64encode ( message_bytes ) base64_message = base64_bytes . decode ( 'ascii' ) print ( base64_message ) #\u00c7\u0131kt\u0131s\u0131 authentication header i\u00e7in kullan\u0131lacak Sonras\u0131nda APIye POST i\u015flemi ile ticket create edilebilir. A\u015fa\u011f\u0131daki kod assigneesi \"eeken\" olan ve verilen summary ve description alanlar\u0131na sahip bir ticket create etmektedir. Creating jira ticket 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 import requests import json from requests.auth import HTTPBasicAuth # Api link for jira url = 'https://jira.hepsiburada.com:8443/rest/api/2/issue/' # request headers included with authorization. Basic means this is basic authentication and meaningless stuff is base64 encrypted result for \"username:pass\" request_headers = { \"Authorization\" : \"Basic ZWVrZW46RW5nKkVrbjU=\" , \"Content-Type\" : \"application/json\" , \"Accept\" : \"application/json\" , } # You can send data with post or put requests. Created a payload which is included with necessary info to create ticket and make it str with json.dumps payload = json . dumps ( { \"fields\" : { \"issuetype\" : { \"id\" : \"3\" }, \"project\" : { \"id\" : \"10032\" }, \"summary\" : \"Test Ortam\u0131 Yeni Salon Altyap\u0131 Haz\u0131rl\u0131\u011f\u0131\" , \"description\" : \"Test ortam\u0131 ta\u015f\u0131nmas\u0131 i\u00e7in Salon 2 ye sunucular\u0131n kablo altyap\u0131s\u0131n\u0131n haz\u0131rlanmas\u0131.\" , \"assignee\" : { \"name\" : \"eeken\" , } } } ) # This is the code snippet making things done. Sending post request to the 'url' with 'request_headers' to post 'payload' response = requests . request ( \"POST\" , url , data = payload , headers = request_headers , ) # This line is printing the answer to your request with readable format. print ( json . dumps ( json . loads ( response . text ), sort_keys = True , indent = 4 , separators = ( \",\" , \": \" )))","title":"Creating Ticket"},{"location":"HowTo/create-update-comment-jira/#updating-and-adding-comment","text":"Ticketa comment eklenebilmesi i\u00e7in \u00f6nce yukar\u0131daki kod ile create edilen ticket\u0131n key de\u011ferinin al\u0131nmas\u0131 gerekiyor. Bu de\u011fer ile ticket \u00fczerinde i\u015flem yap\u0131lacak. Yine bir post i\u015flemi ve eklenecek commenti data olarak request i\u00e7erisinde g\u00f6ndererek bu i\u015flem ger\u00e7ekle\u015ftirilebilir. Adding comment 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # If you want to edit the created ticket above, you need to provide the 'key' or 'id' value for that ticket. Key value is much more understandable like SYS-17895. # Above ticket create request answer the request with key value for that ticket. So, you can get the value and assign to a variable with below codeline. key = json . loads ( response . text )[ 'key' ] # You need to add key value and \"/comment\" to your URL to add comment. url_comment = url + str ( key ) + \"/comment\" # Use the body value for the comment that you want to add payload = json . dumps ( { \"body\" : \"Altyap\u0131 haz\u0131rlanm\u0131\u015f, sunucular ta\u015f\u0131nabilir hale gelmi\u015ftir.\" , } ) # Send POST request to edit the ticket with the above comment. response = requests . request ( \"POST\" , url_comment , data = payload , headers = request_headers , ) print ( json . dumps ( json . loads ( response . text ), sort_keys = True , indent = 4 , separators = ( \",\" , \": \" ))) Comment ekledikten sonra art\u0131k ticket\u0131n statusu de de\u011fi\u015ftirilebilir. Bu i\u015flem i\u00e7in API urline /transition eklenmelidir. Yine bir post i\u015flemi oldu\u011fu i\u00e7in de post data i\u00e7erisinde transition id belirtilmelidir. Bu id ler yine kurulan jiradan jiraya de\u011fi\u015fmektedir. Yine get API calllar\u0131 ile bunlar var olan ticketlar i\u00e7in belirlenebilir. Bizim ortam\u0131m\u0131z i\u00e7in In Progress 61, Resolved 31, Closed is 41 idsine sahiptir. Updating Ticket 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 # You can change the ticket status with adding key + /transition to you URL url_status = url + str ( key ) + \"/transitions\" # For the transition to take place, you need to provide at least \"update\" or \"fields\" value. # id value is 61 for the status 'In Progress', 31 for the status 'Resolved' and 41 for the status 'Closed' for our workplace. These values will be different for different workplaces. payload = json . dumps ( { \"update\" : {}, \"transition\" : { \"id\" : \"\" } } ) # This loop is for changing case status to In Progress --> Resolved --> Closed respectively. for i in range ( 3 ): payload = json . loads ( payload ) if i == 0 : payload [ 'transition' ][ 'id' ] = \"61\" print ( payload [ 'transition' ][ 'id' ]) elif i == 1 : payload [ 'transition' ][ 'id' ] = \"31\" print ( payload [ 'transition' ][ 'id' ]) elif i == 2 : payload [ 'transition' ][ 'id' ] = \"41\" print ( payload [ 'transition' ][ 'id' ]) payload = json . dumps ( payload ) response = requests . request ( \"POST\" , url_status , data = payload , headers = request_headers , ) print ( response ) Note Ticketa epic link vermek i\u00e7in data g\u00f6ndermemiz gereken alan \"customfield_10961\". Bu de\u011fer \"fields\" alan\u0131 alt\u0131nda yer al\u0131yor. E\u011fer epic link olarak \"Network Configuration\" vermek istiyorsak yukar\u0131daki field\u0131 \"customfield_10961\": \"SYS-17387\", \u015feklinde config etmemiz laz\u0131m.","title":"Updating and Adding Comment"},{"location":"HowTo/install-smokeping/","text":"How to Install SmokePing on CentOS \u00b6 A\u015fa\u011f\u0131daki \u015fekilde \u00f6nce network tan\u0131m\u0131 yap\u0131l\u0131r ve de\u011fi\u015fikliklerin aktif olmas\u0131 i\u00e7in network servisi restart edilir. $ vi /etc/sysconfig/network-scripts/ifcfg-ens192 $ systemctl restart network Asya \u00d6rnek Network Tan\u0131m\u0131 TYPE=\"Ethernet\" PROXY_METHOD=\"none\" BROWSER_ONLY=\"no\" BOOTPROTO=\"none\" DEFROUTE=\"yes\" IPV4_FAILURE_FATAL=\"no\" IPV6INIT=\"no\" IPV6_AUTOCONF=\"yes\" IPV6_DEFROUTE=\"yes\" IPV6_FAILURE_FATAL=\"no\" IPV6_ADDR_GEN_MODE=\"stable-privacy\" NAME=\"ens192\" DEVICE=\"ens192\" ONBOOT=\"yes\" IPADDR=\"10.170.250.100\" PREFIX=\"24\" GATEWAY=\"10.170.250.1\" DNS1=\"10.170.166.40\" DNS2=\"10.170.166.41\" Avrupa \u00d6rnek Network Tan\u0131m\u0131 TYPE=\"Ethernet\" PROXY_METHOD=\"none\" BROWSER_ONLY=\"no\" BOOTPROTO=\"none\" DEFROUTE=\"yes\" IPV4_FAILURE_FATAL=\"no\" IPV6INIT=\"no\" IPV6_AUTOCONF=\"yes\" IPV6_DEFROUTE=\"yes\" IPV6_FAILURE_FATAL=\"no\" IPV6_ADDR_GEN_MODE=\"stable-privacy\" NAME=\"ens192\" DEVICE=\"ens192\" ONBOOT=\"yes\" IPADDR=\"10.168.250.100\" PREFIX=\"24\" GATEWAY=\"10.168.250.1\" DNS1=\"192.168.166.40\" DNS2=\"192.168.166.41\" Hostname tan\u0131m\u0131 yap\u0131l\u0131r hostnamectl set-hostname Smokeping- --Smokeping Kurulum Ad\u0131mlar\u0131 yum -y install epel-release yum -y install smokeping yum -y update --Makine reboot edilir reboot --Web Aray\u00fcz\u00fc i\u00e7in Apache Tan\u0131m\u0131 vim /etc/httpd/conf.d/smokeping.conf dosyas\u0131 i\u00e7erisindeki a\u015fa\u011f\u0131daki local tan\u0131m\u0131 all granted olarak editlenir Require local >> Require all granted --Serviceler restart edilir. systemctl enable smokeping systemctl restart smokeping systemctl restart httpd --http:// /smokeping/sm.cgi adresi \u00fczerinden aray\u00fcze eri\u015filir.","title":"How to Install Smokeping"},{"location":"HowTo/install-smokeping/#how-to-install-smokeping-on-centos","text":"A\u015fa\u011f\u0131daki \u015fekilde \u00f6nce network tan\u0131m\u0131 yap\u0131l\u0131r ve de\u011fi\u015fikliklerin aktif olmas\u0131 i\u00e7in network servisi restart edilir. $ vi /etc/sysconfig/network-scripts/ifcfg-ens192 $ systemctl restart network Asya \u00d6rnek Network Tan\u0131m\u0131 TYPE=\"Ethernet\" PROXY_METHOD=\"none\" BROWSER_ONLY=\"no\" BOOTPROTO=\"none\" DEFROUTE=\"yes\" IPV4_FAILURE_FATAL=\"no\" IPV6INIT=\"no\" IPV6_AUTOCONF=\"yes\" IPV6_DEFROUTE=\"yes\" IPV6_FAILURE_FATAL=\"no\" IPV6_ADDR_GEN_MODE=\"stable-privacy\" NAME=\"ens192\" DEVICE=\"ens192\" ONBOOT=\"yes\" IPADDR=\"10.170.250.100\" PREFIX=\"24\" GATEWAY=\"10.170.250.1\" DNS1=\"10.170.166.40\" DNS2=\"10.170.166.41\" Avrupa \u00d6rnek Network Tan\u0131m\u0131 TYPE=\"Ethernet\" PROXY_METHOD=\"none\" BROWSER_ONLY=\"no\" BOOTPROTO=\"none\" DEFROUTE=\"yes\" IPV4_FAILURE_FATAL=\"no\" IPV6INIT=\"no\" IPV6_AUTOCONF=\"yes\" IPV6_DEFROUTE=\"yes\" IPV6_FAILURE_FATAL=\"no\" IPV6_ADDR_GEN_MODE=\"stable-privacy\" NAME=\"ens192\" DEVICE=\"ens192\" ONBOOT=\"yes\" IPADDR=\"10.168.250.100\" PREFIX=\"24\" GATEWAY=\"10.168.250.1\" DNS1=\"192.168.166.40\" DNS2=\"192.168.166.41\" Hostname tan\u0131m\u0131 yap\u0131l\u0131r hostnamectl set-hostname Smokeping- --Smokeping Kurulum Ad\u0131mlar\u0131 yum -y install epel-release yum -y install smokeping yum -y update --Makine reboot edilir reboot --Web Aray\u00fcz\u00fc i\u00e7in Apache Tan\u0131m\u0131 vim /etc/httpd/conf.d/smokeping.conf dosyas\u0131 i\u00e7erisindeki a\u015fa\u011f\u0131daki local tan\u0131m\u0131 all granted olarak editlenir Require local >> Require all granted --Serviceler restart edilir. systemctl enable smokeping systemctl restart smokeping systemctl restart httpd --http:// /smokeping/sm.cgi adresi \u00fczerinden aray\u00fcze eri\u015filir.","title":"How to Install SmokePing on CentOS"}]}